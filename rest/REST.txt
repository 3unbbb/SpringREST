Rest.txt

REST(Representational State Tansfer) : 서버와 통신하는 방법
=> 핵심 데이터 & 기능 형태를 외부에서활용 가능하도록 제공하는 방식

* URI는 동사 x, 명사-복수(o) 로 구성해야함
* URI 마지막은 /를 사용할 수 없음
* 소문자 구성, _(x), -(o) 데이터 연결
* 리소스 관계를 표시 자원/id/자원 구성


* 제약조건
	1. Client - Server : 요청,제공 측은 표준 인터페이스의 형태로 구현(상호 독립적)
	2. Stateless : 클라이언트의 컨텍스트가 서버에 저장없이, 클라이언트에만 저장
	3. Cacheable : 서버의 응답을 캐싱할 수 있어야 함
	4. Layered System : 클라이언트와 서버 사이의 부하를 분산
	5. Code On Demand : 클라이언트가 수행가능한 부분을 스크립트로 제공
	
	@ResponseBody : - spring3 지원
	@RestController - spring4 지원




그런REST API로 괜찮은가(유튜브)


1. Jackson Databind (maven repository)
2. advanced rest client
	https://chrome.google.com/webstore/detail/advanced-rest-client/hgmloofddffdnphfgcellkdfbfbjeloo?ctx=deblog20052011&hl=ko
	
jsp 수업했던거 jQuery> ajax > 


* RestController 는 별도의 view 페이지가 없기 때문에 결과에 따른 상태를 알기가 어렵다.
	=>HTTP status 를 사용한 데이터 처리결과를 표시
		1xx (정보): 요청을 받았으며 프로세스를 계속한다
			100 : 데이터 중 일부만 서버가 전송받은 상태
			
		2xx (성공): 요청을 성공적으로 받았으며 인식했고 수용하였다
			200 : 에러없이 정상 처리
			204 : 정상처리긴 하나, 서버에서 보내줄 데이터가 없음
			
		3xx (리다이렉션): 요청 완료를 위해 추가 작업 조치가 필요하다
			301 : 요청된 페이지가 url이 변경
			304 : 이미 기존의 데이터와 차이가 없음(변경 안됨)
			
		4xx (클라이언트 오류): 요청의 문법이 잘못되었거나 요청을 처리할 수 없다
			400 : 전송된 요청(request)에 문제가 있어서 서버를 인식 불가 (ajax로 보낼때 보내는 형태가 잘못 되면 자주 뜸)
			403 : 서버에서 허락없는 접근(방화벽)
			404 : url에 해당하는 정보를 찾을 수 없음
			406 : 전송방식이 허락되지 않음 => get으로 못부르는데 get으로 호출할 때
			
		5xx (서버 오류): 서버가 명백히 유효한 요청에 대해 충족을 실패했다
			500 : 서버에서 처리 시 문제가 발생
			502 : 게이트웨이 / 프록시상태 문제(과부하)
			503 : 일시적인 서버 과부화, 서비스 중단 상태
			504 : 지정된 처리시간을 지나서 처리 할 수 없음
			
		==> ResponseEntity 객체 제공(스프링)
			(결과데이터 + http 상태코드를 동시에 제어하는 클래스)
	

* REST컨트롤러에서의 HTTP메서드의 의미
	
	POST - 추가(Create)
	GET - 조회(Select/Read)
	PUT - 수정(전체)(Update) / PATCH(일부 수정)
	DELETE - 삭제(Delete)
	
	*REST 방식 주소 구현 형태	
	[/작업명/기본키+메서드+데이터]
	
	작업명 : 요청하는 작업의 종류(members/boards/goods...)
	기본키 : 요청작업에 해당하는 대상의 기본키
	데이터 : 기능 수행에 필요한 JSON데이터
	
	ex) URI : /boards+데이터		(POST) : 글쓰기
	ex) URI : /boards				(GET) : 전체 글 정보 조회
	ex) URI : /boards/100			(GET) : 100번 글 조회
	ex) URI : /boards/100			(DELETE) : 100번 글 삭제
	ex) URI : /boards/100 + 데이터	(PUT) : 100번 글 수정
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
